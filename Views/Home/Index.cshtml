@{
    ViewData["Title"] = "Home Page";
}
@model ProjectX.ViewModels.Workers;

<!DOCTYPE html>

<style>
    html, body {
        max-width: 100%;
        overflow-x: hidden;
    }

    .mydiv {
        position: absolute;
        z-index: 9;
        background-color: #6C98E1;
        text-align: center;
        vertical-align: top;
        border: 1px solid #d3d3d3;
        width: 90%;
        height: 5%;
        cursor: move;
    }

    #mydivheader {
        padding: 10px;
        cursor: move;
        z-index: 10;
        background-color: #2196F3;
        color: #fff;
    }

    .vl {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 25%;
        margin-left: -3px;
        top: 10%;
    }

    .v2 {
        border-left: 6px solid black;
        height: 5000px;
        position: absolute;
        left: 50%;
        margin-left: -3px;
        top: 10%;
    }

    .v3 {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 75%;
        margin-left: -3px;
        top: 10%;
    }

    .v4 {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 80%;
        margin-left: -3px;
        top: 10%;
    }

    .sidenav {
        height: 100%;
        width: 350px;
        position: fixed;
        z-index: 1;
        top: 0;
        left: 0;
        background-color: #111;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 60px;
        visibility: hidden;
    }

    .dayLeft {
        left: 25%;
        text-align: center;
        float: left;
        position: relative;
    }

    .dayRight {
        left: 25%;
        text-align: center;
        position: relative;
    }

    table, th, td {
        border: 1px solid black;
    }

    td {
        /*height: 500px;
        width: 350px;*/
    }

    table.center {
        margin-left: auto;
        margin-right: auto;
    }

        table.center td {
            height: 500px;
            width: 350px;
        }
</style>
<html>
<body>
    @{
        var workersList = Model;
    }

    <div class="main">
        <center><h1>Obłożenie aunwdkanwdjnawkj dnakwfjnkaw</h1></center>
        @*<h2><div class="dayLeft">Piąteg</div></h2>
            <h2><div class="dayRight">Poniedziałeg</div></h2>
            <div class="vl"></div>
            <div class="v2"></div>
            <div class="v3"></div>*@

        <table class="center">
            <tr>
                <th colspan="2">Pon</th>
                <th colspan="2">Wt</th>
            </tr>
            @{
                int x = 1;
                int y = 1;
                for (x = 1; x <= 10; x++)
                {
                    <tr>
                        @for (y = 1; y <= 4; y++)
                        {
                            <td id="@x.@y" onmousemove="onMouseUpdate(null, @x, @y)"></td>
                        }
                    </tr>
                }
            }
        </table>



        <div id="mySidenav" class="sidenav">
            <table>
                <tr><th></th></tr>
                @for (var i = 0; i < Model.WorkersData.Count; i++)
                {
                    <tr id="-1">
                        <td height="50px" id="-2">
                            <div id="@i" onmouseenter="startDraging(@i)" class="mydiv">
                                <div>@Model.WorkersData[i].Name @Model.WorkersData[i].Surname</div>
                            </div>
                        </td>
                    </tr>
                }
            </table>

        </div>


    </div>

    <script>

        //Make the DIV element draggagle:
        document.addEventListener('mousemove', onMouseUpdate, false);
        document.addEventListener('mouseenter', onMouseUpdate, false);
        var arrayOfTables = Array(10).fill(0).map(() => Array(4).fill(0).map(() => Array(2).fill(0)));
        for (var i = 0; i < arrayOfTables.length; i++) {
            for (var j = 0; j < arrayOfTables[0].length; j++) {
                    arrayOfTables[i][j][1] = [];
                }
            }
        var actualCoordinatesColumn = [0, 0]
        var lastAutoCreatedindexOfWorker = @Model.WorkersData.Count;
        var isFirst = false;

        //function enterMeeee(x, y) {
        //    actualCoordinatesColumn[0] = document.getElementById((x + "." + y).toString()).getBoundingClientRect().left;
        //    actualCoordinatesColumn[1] = document.getElementById((x + "." + y).toString()).getBoundingClientRect().top;
        //    actualCoordinatesColumn[2] = x;
        //    actualCoordinatesColumn[3] = y;
        //    console.log(x + "," + y);
       // }

        function startDraging(id) {
            var savedDiv = document.getElementById(id);
            var rect = savedDiv.getBoundingClientRect();
            var posOfDiv = [rect.left, rect.top];
            dragElement(document.getElementById(id), id, firstTick = true, savedDiv.cloneNode(true), posOfDiv);

        }

        function dragElement(elmnt, save_id, firstTick, divClone, positionOfDiv) {
            var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            var firstTickValue = firstTick;
            var divToClone = divClone;
            if (document.getElementById(elmnt.id + "header")) {
                document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
            } else {
                elmnt.onmousedown = dragMouseDown;
            }

            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // get the mouse cursor position at startup:
                pos3 = e.clientX;
                pos4 = e.clientY;
                var parentNodeName = elmnt.parentNode.nodeName;
                if (parentNodeName == "DIV") {
                    arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][0] -= 1;
                    var isElementExist = arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].indexOf(parseInt(save_id));
                    console.log(isElementExist + " <--- this is it and this is id " + save_id + " and this is array " + arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1] + " Coords " + parseInt(actualCoordinatesColumn[2] - 1) + "|" + parseInt(actualCoordinatesColumn[3] - 1));
                    if (isElementExist > -1) {
                        arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].splice(isElementExist, 1);
                    }
                }
                //console.log(arrayOfTables);
                console.log(actualCoordinatesColumn[2] + "  |   " + actualCoordinatesColumn[3]);

                if (parentNodeName == "TD") {
                    isFirst = true;
                }
                else {
                    isFirst = false;
                }
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;


            }

            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // calculate the new cursor position:

                document.getElementsByClassName("main")[0].appendChild(document.getElementById(save_id));
                elmnt = document.getElementById(save_id);
                elmnt.style.visibility = "visible";
                elmnt.style.width = '350px';
                if (firstTickValue) {
                    elmnt.style.top = e.clientY + window.scrollY + "px";
                    firstTickValue = false;
                }


                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // set the element's new position:
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
            }

            function closeDragElement(e) {
                /* stop moving when mouse button is released:*/
                e = e || window.event;
                e.preventDefault();

                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;

                document.onmouseup = null;
                document.onmousemove = null;

                elmnt.style.left = actualCoordinatesColumn[0] + "px";
                elmnt.style.top = actualCoordinatesColumn[1] + window.scrollY + "px";


                if (arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].indexOf(save_id) == -1) {

                    arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][0] += 1;
                    arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].push(save_id);
                }



                console.log(arrayOfTables[0][0][1] + " , " + arrayOfTables[0][1][1] + " , " + arrayOfTables[0][2][1] + " , " + arrayOfTables[0][3][1])

                if (isFirst) {
                    var navClass = document.getElementById(-2);
                    navClass.appendChild(divToClone).setAttribute("id", lastAutoCreatedindexOfWorker)
                    var newEle = document.getElementById(lastAutoCreatedindexOfWorker)
                    newEle.setAttribute("onmouseenter", "startDraging("+lastAutoCreatedindexOfWorker+")");
                    newEle.style.left = positionOfDiv[0] + "px";
                    newEle.style.top = positionOfDiv[1] + "px";
                    lastAutoCreatedindexOfWorker++;
                }

                for (var i = 0; i < arrayOfTables.length; i++) {
                    for (var j = 0; j < arrayOfTables[0].length; j++) {
                        //if (arrayOfTables[i][j][0] > 1) {
                            for (var y = 0; y < arrayOfTables[i][j][1].length; y++) {
                                //if (arrayOfTables[i][j][1][y] == save_id) {
                                //console.log(i + 1 + "   " + j + 1 + "   " + i + "   " + j);
                                    document.getElementById(arrayOfTables[i][j][1][y]).style.top = document.getElementById((parseInt(i+1) + "." + parseInt(j+1)).toString()).getBoundingClientRect().top + (50*y) + window.scrollY + "px";
                                //}
                            }
                        //}
                    }
                }

            }


        }

        function getWidth() {
            return Math.max(
                //document.body.scrollWidth,
                //document.documentElement.scrollWidth,
                //document.body.offsetWidth,
                //document.documentElement.offsetWidth,
                document.documentElement.clientWidth
            );
        }

        function getHeight() {
            return Math.max(
                //document.body.scrollHeight,
                //document.documentElement.scrollHeight,
                //document.body.offsetHeight,
                //document.documentElement.offsetHeight,
                document.documentElement.clientHeight
            );
        }

        function onMouseUpdate(e, xx = null, yy = null) {

            if ((e != null) && (xx == null) && (yy == null)) {
                x = e.pageX;
                y = e.pageY;

                if (x < getWidth() * 0.01) {
                    openNav();
                }
                if (x > 250) {
                    closeNav();
                }
            }


             if ((xx != null) && (yy != null)) {
                actualCoordinatesColumn[0] = document.getElementById((xx + "." + yy).toString()).getBoundingClientRect().left;
                actualCoordinatesColumn[1] = document.getElementById((xx + "." + yy).toString()).getBoundingClientRect().top;
                actualCoordinatesColumn[2] = xx;
                actualCoordinatesColumn[3] = yy;
            }

            console.log(actualCoordinatesColumn[2] + "  |   " + actualCoordinatesColumn[3]);

        }

        function openNav() {
            document.getElementById("mySidenav").style.visibility = "visible";
        }

        function closeNav() {
            document.getElementById("mySidenav").style.visibility = "hidden";
        }

        function getKeyByValue(object, value) {
            return Object.keys(object).filter(key => object[key] === value);
        }

        function getCount(parent, getChildrensChildren) {
            var relevantChildren = 0;
            var children = parent.childNodes.length;
            for (var i = 0; i < children; i++) {
                if (parent.childNodes[i].nodeType != 3) {
                    if (getChildrensChildren)
                        relevantChildren += getCount(parent.childNodes[i], true);
                    relevantChildren++;
                }
            }
            return relevantChildren;
        }

        function GetIfElementParentIsTable(object) {
            //var elm = document.getElementById(childID);
            if (object.parentNode.constructor.name == "HTMLDivElement") {
                return false;
            }

            if (object.parentNode.constructor.name == "HTMLTableCellElement") {
                return true;
            }
        }

        function arrayRemove(arr, value) {

        return arr.filter(function(ele){
            return ele != value;
        });

}

    </script>

</body>
</html>
