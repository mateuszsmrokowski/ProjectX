@{
    ViewData["Title"] = "Home Page";
}
@model ProjectX.ViewModels.Workers;

<!DOCTYPE html>

<style>
    html, body {
        max-width: 100%;
        overflow-x: hidden;
    }

    .mydiv {
        position: absolute;
        z-index: 9;
        background-color: #6C98E1;
        text-align: center;
        vertical-align: top;
        border: 1px solid #d3d3d3;
        width: 90%;
        height: 5%;
        cursor: move;
    }

    #mydivheader {
        padding: 10px;
        cursor: move;
        z-index: 10;
        background-color: #2196F3;
        color: #fff;
    }

    .vl {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 25%;
        margin-left: -3px;
        top: 10%;
    }

    .v2 {
        border-left: 6px solid black;
        height: 5000px;
        position: absolute;
        left: 50%;
        margin-left: -3px;
        top: 10%;
    }

    .v3 {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 75%;
        margin-left: -3px;
        top: 10%;
    }

    .v4 {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 80%;
        margin-left: -3px;
        top: 10%;
    }

    .sidenav {
        height: 100%;
        width: 350px;
        position: fixed;
        z-index: 1;
        top: 0;
        left: 0;
        background-color: #111;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 60px;
        visibility: hidden;
    }

    .dayLeft {
        left: 25%;
        text-align: center;
        float: left;
        position: relative;
    }

    .dayRight {
        left: 25%;
        text-align: center;
        position: relative;
    }
</style>
<html>
<body onmousemove="mouse_position(event)">
    @*<div class="head">

        </div>*@
    @{
        var workersList = Model;
    }

    <div class="main">
        <center><h1>Obłożenie aunwdkanwdjnawkj dnakwfjnkaw</h1></center>
        <h2><div class="dayLeft">Piąteg</div></h2>
        <h2><div class="dayRight">Poniedziałeg</div></h2>
        <div class="vl"></div>
        <div class="v2"></div>
        <div class="v3"></div>



        <div id="mySidenav" class="sidenav">
            <table>
                <tr><th></th></tr>
                @for (var i = 0; i < Model.WorkersData.Count; i++)
                {
                    <tr>
                        <td height="50px">
                            <div id="@i" onmouseenter="startDraging(@i)" class="mydiv">
                                <div>@Model.WorkersData[i].Name @Model.WorkersData[i].Surname</div>
                            </div>
                        </td>
                    </tr>
                }
            </table>

        </div>


    </div>

    <script>

        //Make the DIV element draggagle:
        document.addEventListener('mousemove', onMouseUpdate, false);
        document.addEventListener('mouseenter', onMouseUpdate, false);
        var coulmnCounter = {};

        function startDraging(id) {
            //var elementX = document.getElementById(id).cloneNode(true);
            //if (isFirst) {
            //document.getElementsByClassName("sidenav")[0].appendChild(document.getElementById(id).cloneNode(true));
            //isFirst = false;
            //}
            var savedDiv = document.getElementById(id);
            dragElement(document.getElementById(id), id, firstTick = true, savedDiv);
        }

        function dragElement(elmnt, save_id, firstTick, savedDiv) {
            var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            var firstTickValue = firstTick;
            var savedDocItem = savedDiv;
            if (document.getElementById(elmnt.id + "header")) {
                document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
            } else {
                elmnt.onmousedown = dragMouseDown;
            }

            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // get the mouse cursor position at startup:
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                // call a function whenever the cursor moves:
                document.onmousemove = elementDrag;
            }

            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // calculate the new cursor position:
                document.getElementsByClassName("main")[0].appendChild(document.getElementById(save_id));
                elmnt = document.getElementById(save_id);
                elmnt.style.visibility = "visible";
                elmnt.style.width = '25%';
                if (firstTickValue) {
                    elmnt.style.top = e.clientY + "px";
                    //document.getElementsByClassName("sidenav")[0].appendChild(savedDocItem.cloneNode(true));
                    firstTickValue = false;
                }


                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // set the element's new position:
                elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
                elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
            }

            function closeDragElement(e) {
                /* stop moving when mouse button is released:*/
                e = e || window.event;
                e.preventDefault();

                pos1 = pos3 - e.clientX;

                //to check why last table go over board...
                if (((elmnt.offsetLeft - pos1 >= 0) && (elmnt.offsetLeft - pos1 <= getWidth() * 0.125)) || (elmnt.offsetLeft - pos1 < 0)) {
                    elmnt.style.left = getWidth() * 0 + "px";
                    coulmnCounter[save_id] = 0;
                }
                if ((elmnt.offsetLeft - pos1 > getWidth() * 0.125) && (elmnt.offsetLeft - pos1 <= getWidth() * 0.375)) {
                    elmnt.style.left = getWidth() * 0.25 + "px";
                    coulmnCounter[save_id] = 1;
                }
                if ((elmnt.offsetLeft - pos1 > getWidth() * 0.375) && (elmnt.offsetLeft - pos1 <= getWidth() * 0.625)) {
                    elmnt.style.left = getWidth() * 0.5 + "px";
                    coulmnCounter[save_id] = 2;
                }
                if (((elmnt.offsetLeft - pos1 > getWidth() * 0.625) && (elmnt.offsetLeft - pos1 <= getWidth() * 0.825)) || (elmnt.offsetLeft - pos1 > getWidth() * 0.825)) {
                    elmnt.style.left = getWidth() * 0.75 + "px";
                    coulmnCounter[save_id] = 3;
                }

                document.onmouseup = null;
                document.onmousemove = null;
                var countInColumns = [0, 0, 0, 0];

                for (var key in coulmnCounter) {
                    var value = coulmnCounter[key];
                    countInColumns[value] += 1;
                }

                elmnt.style.top = getHeight() * (0.05 * (countInColumns[coulmnCounter[save_id]] - 1)) + "px";

                var heightWithHeader = getHeight() * 0.1;
                //check if are not void table on board
                for (var i = 0; i < 4; i++) {
                    if (countInColumns[i] > 0) {
                        var vals = getKeyByValue(coulmnCounter, i);
                        if (vals.length > 1) {
                            for (var j = 0; j < vals.length; j++) {
                                document.getElementById(vals[j]).style.top = heightWithHeader + getHeight() * (0.05 * (j)) + "px";
                            }
                        }
                        else if (vals.length == 1) {
                            document.getElementById(vals[0]).style.top = heightWithHeader + "px";
                        }
                    }
                }

                //elmnt.style.visibility = "visible";
                //elmnt.style.width = '25%';
                //document.getElementsByClassName("main")[0].appendChild(document.getElementById(save_id));

            }


        }

        function getWidth() {
            return Math.max(
                //document.body.scrollWidth,
                //document.documentElement.scrollWidth,
                //document.body.offsetWidth,
                //document.documentElement.offsetWidth,
                document.documentElement.clientWidth
            );
        }

        function getHeight() {
            return Math.max(
                //document.body.scrollHeight,
                //document.documentElement.scrollHeight,
                //document.body.offsetHeight,
                //document.documentElement.offsetHeight,
                document.documentElement.clientHeight
            );
        }

        function onMouseUpdate(e) {
            x = e.pageX;
            y = e.pageY;
            if (x < getWidth() * 0.01) {
                openNav();
            }
            if (x > 250) {
                closeNav();
            }

        }

        function openNav() {
            document.getElementById("mySidenav").style.visibility = "visible";
        }

        function closeNav() {
            document.getElementById("mySidenav").style.visibility = "hidden";
        }

        function getKeyByValue(object, value) {
            return Object.keys(object).filter(key => object[key] === value);
        }

        function getCount(parent, getChildrensChildren) {
            var relevantChildren = 0;
            var children = parent.childNodes.length;
            for (var i = 0; i < children; i++) {
                if (parent.childNodes[i].nodeType != 3) {
                    if (getChildrensChildren)
                        relevantChildren += getCount(parent.childNodes[i], true);
                    relevantChildren++;
                }
            }
            return relevantChildren;
        }

    </script>

</body>
</html>
