@{
    ViewData["Title"] = "Home Page";
}
@model ProjectX.ViewModels.WorkersViewModel;

<script src="~/js/multithread.js" type="text/javascript"></script>
<script src="https://code.jquery.com/jquery-1.11.0.min.js"></script>
<!DOCTYPE html>

<style>
    html, body {
        max-width: 100%;
        overflow-x: hidden;
    }

    .mydiv {
        position: absolute;
        z-index: 9;
        background-color: #6C98E1;
        text-align: center;
        vertical-align: top;
        border: 1px solid #d3d3d3;
        width: 90%;
        height: 5%;
        cursor: move;
    }

    #mydivheader {
        padding: 10px;
        cursor: move;
        z-index: 10;
        background-color: #2196F3;
        color: #fff;
    }

    .vl {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 25%;
        margin-left: -3px;
        top: 10%;
    }

    .v2 {
        border-left: 6px solid black;
        height: 5000px;
        position: absolute;
        left: 50%;
        margin-left: -3px;
        top: 10%;
    }

    .v3 {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 75%;
        margin-left: -3px;
        top: 10%;
    }

    .v4 {
        border-left: 6px solid green;
        height: 5000px;
        position: absolute;
        left: 80%;
        margin-left: -3px;
        top: 10%;
    }

    .sidenav {
        height: 100%;
        width: 350px;
        position: fixed;
        z-index: 1;
        top: 0;
        left: 0;
        background-color: #111;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 60px;
        visibility: hidden;
    }

    .dayLeft {
        left: 25%;
        text-align: center;
        float: left;
        position: relative;
    }

    .dayRight {
        left: 25%;
        text-align: center;
        position: relative;
    }

    table, th, td {
        border: 1px solid black;
    }

    td {
        /*height: 500px;
        width: 350px;*/
    }

    table.center {
        margin-left: auto;
        margin-right: auto;
    }

        table.center td {
            height: 500px;
            width: 350px;
        }

    .shift-place {
        text-align: center;
        vertical-align: top;
    }
</style>
<html>
<body>
    @{
        var workersList = Model;
        var assigmentData = Model.WorkersAssigmentData;
    }

    <div class="main">
        <center><h1>Obłożenie na kopalni XxX</h1></center>

        <table class="center">
            <tr>
                <th colspan="2">Pon</th>
                <th colspan="2">Wt</th>
            </tr>
            @{
                int x = 1;
                int y = 1;
                for (x = 1; x <= 10; x++)
                {
                    <tr>
                        @for (y = 1; y <= 4; y++)
                        {
                            <td id="@x.@y" onmouseover="onMouseUpdateInTable(@x, @y)" class="shift-place">
                                @if (x <= 8)
                                {
                                    @if ((x == 1) || (x == 2))
                                    {
                                        <span style="white-space: pre-line">@Html.Raw("ZM. 'G' 7:00 - 14:30\r")</span>
                                    }
                                    @if ((x == 3) || (x == 4))
                                    {
                                        <span style="white-space: pre-line">@Html.Raw("ZM. 'B' 12:00 - 19:30\r")</span>
                                    }
                                    @if ((x == 5) || (x == 6))
                                    {
                                        <span style="white-space: pre-line">@Html.Raw("ZM. 'T' 17:00 - 0:30\r")</span>
                                    }
                                    @if ((x == 7) || (x == 8))
                                    {
                                        <span style="white-space: pre-line">@Html.Raw("ZM. 'D' 24:00 - 7:30\r")</span>
                                    }

                                    @if (x % 2 == 0)
                                    {
                                        @Html.Raw("REZERWA");

                                    }
                                    else
                                    {
                                        @if ((y == 1) || (y == 3))
                                        {
                                            @Html.Raw("Zastęp NR 1");
                                        }
                                        else
                                        {
                                            @Html.Raw("Zastęp NR 2");
                                        }
                                    }
                                }
                                else
                                {
                                    if (x == 9)
                                    {
                                        if (y < 4)
                                        {
                                            @Html.Raw("URLOP");

                                        }
                                        else
                                        {
                                            @Html.Raw("BAD. RATOWNICZE");
                                        }
                                    }
                                    if (x == 10)
                                    {
                                        switch (y)
                                        {
                                            case 1:
                                                @Html.Raw("L-4");
                                                break;
                                            case 2:
                                                @Html.Raw("ĆWICZENIA");
                                                break;
                                            case 3:
                                                @Html.Raw("L-4");
                                                break;
                                            case 4:
                                                @Html.Raw("POGOTOWIE");
                                                break;
                                        }
                                    }
                                }

                            </td>
                        }
                    </tr>
                }
            }
        </table>



        <div id="mySidenav" class="sidenav">
            <table>
                <tr><th></th></tr>
                @for (var i = 0; i < Model.AllWorkersList.Count; i++)
                {
                    <tr>
                        <td height="50px" id="sideNavTd">
                            <div id="@i" onmouseenter="startDraging(@i)" class="mydiv" dbWorkerId="@i">
                                <div>@Model.AllWorkersList[i].Name @Model.AllWorkersList[i].Surname</div>
                            </div>
                        </td>
                    </tr>
                }
            </table>

        </div>


    </div>
</body>
</html>
<script>
    //Make the DIV element draggagle:
    document.addEventListener('mousemove', onMouseUpdate, false);
    document.addEventListener('mouseenter', onMouseUpdate, false);
    var arrayOfTables = Array(10).fill(0).map(() => Array(4).fill(0).map(() => Array(2).fill(0)));
    for (var i = 0; i < arrayOfTables.length; i++) {
        for (var j = 0; j < arrayOfTables[0].length; j++) {
            arrayOfTables[i][j][1] = [];
        }
    }
    var actualCoordinatesColumn = [0, 0]
    var lastAutoCreatedindexOfWorker = @Model.AllWorkersList.Count;
    var isFirst = false;

    function startDraging(id) {
        var savedDiv = document.getElementById(id);
        var rect = savedDiv.getBoundingClientRect();
        var posOfDiv = [rect.left, rect.top];
        dragElement(document.getElementById(id), id, firstTick = true, savedDiv.cloneNode(true), posOfDiv);

    }

    function dragElement(elmnt, save_id, firstTick, divClone, positionOfDiv) {
        var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        var firstTickValue = firstTick;
        var divToClone = divClone;
        if (document.getElementById(elmnt.id + "header")) {
            document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
        } else {
            elmnt.onmousedown = dragMouseDown;
        }

        function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            // get the mouse cursor position at startup:
            pos3 = e.clientX;
            pos4 = e.clientY;
            var parentNodeName = elmnt.parentNode.nodeName;
            if (parentNodeName == "DIV") {
                arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][0] -= 1;
                var isElementExist = arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].indexOf(parseInt(save_id));
                if (isElementExist > -1) {
                    arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].splice(isElementExist, 1);
                }
            }

            if (parentNodeName == "TD") {
                isFirst = true;
                //elmnt.setAttribute("dbWorkerId", save_id);
            }
            else {
                isFirst = false;
            }
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;


        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            document.getElementsByClassName("main")[0].appendChild(document.getElementById(save_id));
            elmnt = document.getElementById(save_id);
            elmnt.style.visibility = "visible";
            elmnt.style.width = '350px';
            if (firstTickValue) {
                elmnt.style.top = e.clientY + window.scrollY + "px";
                firstTickValue = false;
            }


            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            // set the element's new position:
            elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
            elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
        }

        function closeDragElement(e) {
            /* stop moving when mouse button is released:*/
            e = e || window.event;
            e.preventDefault();

            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;

            document.onmouseup = null;
            document.onmousemove = null;

            elmnt.style.left = actualCoordinatesColumn[0] + "px";
            elmnt.style.top = actualCoordinatesColumn[1] + window.scrollY + "px";

            if (arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].indexOf(save_id) == -1) {

                arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][0] += 1;
                arrayOfTables[parseInt(actualCoordinatesColumn[2]) - 1][parseInt(actualCoordinatesColumn[3]) - 1][1].push(save_id);
            }

            if (isFirst) {
                var navClass = document.getElementById("sideNavTd");
                navClass.appendChild(divToClone).setAttribute("id", lastAutoCreatedindexOfWorker);
                var newEle = document.getElementById(lastAutoCreatedindexOfWorker);
                newEle.setAttribute("onmouseenter", "startDraging(" + lastAutoCreatedindexOfWorker + ")");
                newEle.style.left = positionOfDiv[0] + "px";
                newEle.style.top = positionOfDiv[1] + "px";
                //document.getElementById(lastAutoCreatedindexOfWorker).setAttribute("myOwnAttr", "myownEq");

                lastAutoCreatedindexOfWorker++;
            }

            //console.log(parseInt(actualCoordinatesColumn[2]) + "   " + parseInt(actualCoordinatesColumn[3]));

            PosibleY = [1, 2, 3, 4];
            PosibleX = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

            var dropElementX = parseInt(actualCoordinatesColumn[2]);
            var dropElementY = parseInt(actualCoordinatesColumn[3]);
            var paramList = [];
            {
                if (dropElementX )
            }

            UpdateWorkers();


            for (var i = 0; i < arrayOfTables.length; i++) {
                for (var j = 0; j < arrayOfTables[0].length; j++) {
                    for (var y = 0; y < arrayOfTables[i][j][1].length; y++) {
                        document.getElementById(arrayOfTables[i][j][1][y]).style.top = document.getElementById((parseInt(i + 1) + "." + parseInt(j + 1)).toString()).getBoundingClientRect().top + (50 * y) + window.scrollY + 50 + "px";
                    }
                }
            }

        }


    }

    window.addEventListener('DOMContentLoaded', (event) => {

        var workersAssigmentData = [];
        @foreach(var xy in Model.WorkersAssigmentData)
    {
        @: workersAssigmentData.push(@Json.Serialize(xy));
    };

        for (var ii = 0; ii < workersAssigmentData.length; ii++) {

            var today = new Date;
            today = today.setHours(0, 0, 0, 0);
            var workerDay = new Date(workersAssigmentData[ii].day);
            workerDay = workerDay.setHours(0, 0, 0, 0);
            workerCoordinates = [1, 1];

            if (workerDay == today) {

                workerCoordinates[0] = workerCoordinates[0] + 2 * (workersAssigmentData[ii].shift - 1) + workersAssigmentData[ii].reserv;
                workerCoordinates[1] = workersAssigmentData[ii].unity;
                var savedDiv = document.getElementById(ii);
                var newElem = savedDiv.cloneNode(true);
                document.getElementsByClassName("main")[0].appendChild(newElem).setAttribute("id", lastAutoCreatedindexOfWorker);
                elmnt = document.getElementById(lastAutoCreatedindexOfWorker);
                elmnt.style.visibility = "visible";
                elmnt.style.width = '350px';
                elmnt.setAttribute("onmouseenter", "startDraging(" + lastAutoCreatedindexOfWorker + ")");
                var getTargetDivPosition = document.getElementById(workerCoordinates[0].toString() + "." + workerCoordinates[1].toString()).getBoundingClientRect();
                elmnt.style.left = getTargetDivPosition.left + "px";
                elmnt.setAttribute("dbWorkerId", ii);
                arrayOfTables[parseInt(workerCoordinates[0]) - 1][parseInt(workerCoordinates[1]) - 1][1].push(lastAutoCreatedindexOfWorker);
                lastAutoCreatedindexOfWorker++;
            };

            var tomorrow = addDays(today, 1).getTime();
            if (workerDay == tomorrow) {
                workerCoordinates[0] = workerCoordinates[0] + 2 * (workersAssigmentData[ii].shift - 1) + workersAssigmentData[ii].reserv;
                workerCoordinates[1] = workersAssigmentData[ii].unity + 2;
                var savedDiv = document.getElementById(ii);
                var newElem = savedDiv.cloneNode(true);
                document.getElementsByClassName("main")[0].appendChild(newElem).setAttribute("id", lastAutoCreatedindexOfWorker);
                elmnt = document.getElementById(lastAutoCreatedindexOfWorker);
                elmnt.style.visibility = "visible";
                elmnt.style.width = '350px';
                elmnt.setAttribute("onmouseenter", "startDraging(" + lastAutoCreatedindexOfWorker + ")");
                var getTargetDivPosition = document.getElementById(workerCoordinates[0] + "." + workerCoordinates[1]).getBoundingClientRect();
                elmnt.style.left = getTargetDivPosition.left + "px";
                elmnt.setAttribute("dbWorkerId", ii);
                arrayOfTables[parseInt(workerCoordinates[0]) - 1][parseInt(workerCoordinates[1]) - 1][1].push(lastAutoCreatedindexOfWorker);
                lastAutoCreatedindexOfWorker++;
            };
        };

        for (var i = 0; i < arrayOfTables.length; i++) {
            for (var j = 0; j < arrayOfTables[0].length; j++) {
                for (var y = 0; y < arrayOfTables[i][j][1].length; y++) {
                    document.getElementById(arrayOfTables[i][j][1][y]).style.top = document.getElementById((parseInt(i + 1) + "." + parseInt(j + 1)).toString()).getBoundingClientRect().top + (50 * y) + window.scrollY + 50 + "px";
                }
            }
        }

    });

    function getWidth() {
        return Math.max(
            //document.body.scrollWidth,
            //document.documentElement.scrollWidth,
            //document.body.offsetWidth,
            //document.documentElement.offsetWidth,
            document.documentElement.clientWidth
        );
    }

    function getHeight() {
        return Math.max(
            //document.body.scrollHeight,
            //document.documentElement.scrollHeight,
            //document.body.offsetHeight,
            //document.documentElement.offsetHeight,
            document.documentElement.clientHeight
        );
    }

    function UpdateWorkers(paramList, baseUrl = "Home/UpdateWorker" ) {
        $.ajax({
            url: 'Home/UpdateWorker?dayId=1&workerId=1&shift=1&unity=1&reserv=1',
                type: "POST"
            });
    };

    function UrlParamCreator(listOfParams, baseUrl) {
        var urlString = baseUrl;
        for (var i = 0; i < listOfParams.length; i++) {
            if (i == 0) {
                urlString += "?" + listOfParams[i];
            }
            else {
                urlString += "&" + listOfParams[i];
            }
        }
        return urlString;
    }
    function onMouseUpdate(e, xx = null, yy = null) {

        if ((e != null) && (xx == null) && (yy == null)) {
            x = e.pageX;
            y = e.pageY;

            if (x < getWidth() * 0.01) {
                openNav();
            }
            if (x > 250) {
                closeNav();
            }
        }

    }

    function onMouseUpdateInTable(xx, yy) {

        actualCoordinatesColumn[0] = document.getElementById((xx + "." + yy).toString()).getBoundingClientRect().left;
        actualCoordinatesColumn[1] = document.getElementById((xx + "." + yy).toString()).getBoundingClientRect().top;
        actualCoordinatesColumn[2] = xx;
        actualCoordinatesColumn[3] = yy;

    }

    function openNav() {
        document.getElementById("mySidenav").style.visibility = "visible";
    }

    function closeNav() {
        document.getElementById("mySidenav").style.visibility = "hidden";
    }

    function getKeyByValue(object, value) {
        return Object.keys(object).filter(key => object[key] === value);
    }

    function getCount(parent, getChildrensChildren) {
        var relevantChildren = 0;
        var children = parent.childNodes.length;
        for (var i = 0; i < children; i++) {
            if (parent.childNodes[i].nodeType != 3) {
                if (getChildrensChildren)
                    relevantChildren += getCount(parent.childNodes[i], true);
                relevantChildren++;
            }
        }
        return relevantChildren;
    }

    function GetIfElementParentIsTable(object) {
        if (object.parentNode.constructor.name == "HTMLDivElement") {
            return false;
        }

        if (object.parentNode.constructor.name == "HTMLTableCellElement") {
            return true;
        }
    }

    function arrayRemove(arr, value) {
        return arr.filter(function (ele) {
            return ele != value;
        });

    }

    function addDays(day, days) {
        var date = new Date(day.valueOf());
        date.setDate(date.getDate() + days);
        return date;
    }

    function arrayRemove(arr, value) {
       return arr.filter(function(ele){
           return ele != value;
       });

    }

</script>
